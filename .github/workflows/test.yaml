name: Test

on:
  push:
    paths-ignore:
      - docs/**

env:
  CI: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v1
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Install
        run: yarn
      - name: Lint
        run: yarn lint
      - name: Build
        run: yarn build:ci
      - name: Upload
        run: actions/upload-artifact@v2
        with:
          name: packages
          path: packages

  unit-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        NODE_VERSION: [14, 16]

    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
        # https://stackoverflow.com/questions/66317184/github-actions-cannot-connect-to-mongodb-service
        options: --health-cmd "mongo" --health-interval 10s --health-timeout 5s --health-retries 5
      mysql57:
        image: mysql:5.7
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 5
        env:
          MYSQL_USER: koishi
          MYSQL_DATABASE: koishi
          MYSQL_PASSWORD: koishi@114514
          MYSQL_ROOT_PASSWORD: password
      maria10:
        image: mariadb:10.5
        ports:
          - 3307:3306
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 5
        env:
          MYSQL_USER: koishi
          MYSQL_DATABASE: koishi
          MYSQL_PASSWORD: koishi@114514
          MYSQL_ROOT_PASSWORD: password
      mysql8:
        image: mysql:8
        ports:
          - 3308:3306
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 5
        env:
          MYSQL_USER: koishi
          MYSQL_DATABASE: koishi
          MYSQL_PASSWORD: koishi@114514
          MYSQL_ROOT_PASSWORD: password

    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: Check out
        uses: actions/checkout@v1
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.NODE_VERSION }}
      - name: Create .npmrc
        run: 'echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc'
      - name: Install
        run: yarn
      - name: Unit Test
        run: yarn test:json
      - name: Report Coverage
        if: ${{ matrix.NODE_VERSION == 14 }}
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/coverage-final.json
          name: codecov

  publish:
    runs-on: ubuntu-latest
    needs:
      - build
      - unit-test

    steps:
      - name: Check out
        uses: actions/checkout@v1
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Install
        run: yarn
      - name: Download
        run: actions/download-artifact@v2
        with:
          name: packages
          path: packages
      - name: Publish
        run: yarn pub
